% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sendeR_lapply.R
\name{sendeR_lapply}
\alias{sendeR_lapply}
\title{sendeR lapply}
\usage{
sendeR_lapply(client, X, FUN, ...)
}
\arguments{
\item{client}{the sendeR client which will send a message at end of the
regular \code{lapply} execution.}

\item{X}{a vector (atomic or list) to apply \code{FUN} to each element. See
\code{\link{lapply}} for more details.}

\item{FUN}{the function to be applied to each element of \code{X}. See
\code{\link{lapply}} for more details.}

\item{...}{named arguments will be passed to the \code{send_message}
function. Unnamed arguments will be passed as \code{...} to \code{lapply}
ultimately being the \code{FUN} functions' arguments.}
}
\description{
Function is a wrapper for standard \code{\link{lapply}}. The
 \code{sendeR_lapply} after performing the regular \code{lapply} executes
 \code{client} argument's \code{\link{send_message}} method thus notifying 
 the user that \code{lapply} has finished.
}
\examples{
# Using regular client
client <- client_telegram("my_token")
\dontrun{
    my_func <- function(x, text) { print(paste(text, x)); Sys.sleep(x) }
    sendeR_lapply(client, 1:10, my_func, "Sleeping:", destination = 12345,
                  message = "sendeR_lapply done!")
}

# Using client with set fields
client_with_fields <- set_fields(client, message = "sendeR_lapply is done!",
                                 destination = 12345)
\dontrun{
    sendeR_lapply(client_with_fields, 1:10, my_func, "Sys.sleep:")
}

}
